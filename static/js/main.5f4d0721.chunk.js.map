{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/quickSort.js","SortingVisualizer/SortingVisualizer.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/insertionSort.js","App.js","reportWebVitals.js","index.js"],"names":["mergeSort","array","animations","length","auxilaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","tempAnimations","push","doMerge","quickSort","quickSortHelper","start","end","pivot","pivotValue","pIndex","bool","temp","pivotIndex","SortingVisualizer","props","onChange","e","numWidth","window","screen","width","target","value","setState","inputSize","barWidth","resetArray","speedChange","speed","runner","isRunning","sorting","state","console","log","this","min","max","random","newarray","sortingAlgorithms","arrayBars","document","getElementsByClassName","isColorChange","setTimeout","barOneIdx","style","backgroundColor","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","height","originalArray","n","phase","tempHeight","bubbleSort","newArray","barOneIndex","barTwoIndex","option","curr","iBar","insertionSort","toDisable","buttonStyle","cursorStyle","cursor","rangerStyle","className","onClick","disabled","type","name","defaultValue","map","idx","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f4d0721.chunk.js","sourcesContent":["// export const mergeSort = array => {\n//     if(array.length === 1) return array;\n//     const middleIdx = Math.floor(array.length / 2)\n//     const firstHalf = mergeSort(array.slice(0, middleIdx))\n//     const secondHalf = mergeSort(array.slice(middleIdx))\n\n//     const sortedArray = [];\n//     let i =0, j = 0;\n//     while (i < firstHalf.length && j < secondHalf.length){\n//         if(firstHalf[i] < secondHalf[j]){\n//             sortedArray.push(firstHalf[i++])\n//         }else {\n//             sortedArray.push(secondHalf[j++])\n//         }\n        \n//     }\n//     while (i < firstHalf.length) sortedArray.push(firstHalf[i++])\n//     while (j < secondHalf.length) sortedArray.push(secondHalf[j++])\n//     return sortedArray;\n// }\n\nexport function mergeSort(array) {\n    const animations = [];\n    if(array.length <= 1) return array;\n    const auxilaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length-1, auxilaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper (\n    mainArray,\n    startIdx,\n    endIdx,\n    auxilaryArray,\n    animations\n) {\n    if(startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxilaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxilaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxilaryArray, animations);\n}\n\n// function doMerge(\n//     mainArray, \n//     startIdx,\n//     middleIdx,\n//     endIdx,\n//     auxilaryArray,\n//     animations\n// ) {\n//     let k = startIdx;\n//     let i = startIdx;\n//     let j = middleIdx + 1;\n\n//     while (i <= middleIdx && j <= endIdx) {\n//         animations.push([i, j])\n//         // animations.push([i, j])\n        \n//         if(auxilaryArray[i] <= auxilaryArray[j]) {\n//             animations.push([k, auxilaryArray[i]]);\n//             mainArray[k++] = auxilaryArray[i++];\n//             animations.push([i-1, j])\n//         } else {\n//             animations.push([k, auxilaryArray[j]])\n//             mainArray[k++] = auxilaryArray[j++];\n//             animations.push([i, j - 1])\n//         }\n//     }\n    \n//     while (i <= middleIdx) {\n//         animations.push([i, i]);\n        \n//         animations.push([k, auxilaryArray[i]])\n//         mainArray[k++] = auxilaryArray[i++];\n//         animations.push([i-1, i-1]);\n//     }\n\n//     while (j <= endIdx) {\n//         animations.push([j, j])\n        \n//         animations.push([k, auxilaryArray[j]])\n//         mainArray[k++] = auxilaryArray[j++];\n//         animations.push([j-1, j-1])\n//     } \n// }\n\nfunction doMerge(\n    mainArray, \n    startIdx,\n    middleIdx,\n    endIdx,\n    auxilaryArray,\n    animations\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    let tempAnimations = [];\n\n    while (i <= middleIdx && j <= endIdx) {\n        //comparing to red\n        animations.push([i, j, 1])\n        \n        //back to turquoise\n        animations.push([i, j, 2])\n        \n        if(auxilaryArray[i] <= auxilaryArray[j]) {\n\n            //overwriting values\n            tempAnimations.push([k, auxilaryArray[i], 0]);\n            tempAnimations.push([k, auxilaryArray[i], 3]);\n\n            mainArray[k++] = auxilaryArray[i++];\n\n        } else {\n            // overwriting value\n            tempAnimations.push([k, auxilaryArray[j], 0])\n            tempAnimations.push([k, auxilaryArray[j], 3])\n            mainArray[k++] = auxilaryArray[j++];\n\n            // //back turquoise\n            // animations.push([i, j - 1])\n        }\n    }\n    \n    while (i <= middleIdx) {\n        animations.push([i, i, 1]);\n        animations.push([i, i, 2]);\n        \n        tempAnimations.push([k, auxilaryArray[i], 0])\n        tempAnimations.push([k, auxilaryArray[i], 3])\n        mainArray[k++] = auxilaryArray[i++];\n    }\n\n    while (j <= endIdx) {\n        animations.push([j, j, 1])\n        animations.push([j, j, 2])\n        \n        tempAnimations.push([k, auxilaryArray[j], 0])\n        tempAnimations.push([k, auxilaryArray[j], 3])\n        mainArray[k++] = auxilaryArray[j++];\n    }\n    animations.push(...tempAnimations);\n}\n\n\n\n \n","function pivotIndex(array, start, end, animations) {\n    let pivotValue = array[end];\n    \n    let pIndex = start; \n    //pivot color to red \n    animations.push([pIndex, end, 1]);\n    \n    for( let i = start; i < end; i++){\n        //comparing bars to green\n        let bool = false;\n        animations.push([i, pIndex, 2])\n        if(array[i] < pivotValue) {\n            bool = true;\n            //change the height\n            animations.push([i, pIndex, 0])\n\n            let temp = array[pIndex]\n            array[pIndex] = array[i];\n            array[i] = temp;\n\n            pIndex++;\n        }\n        if(bool) {\n            animations.push([i, pIndex-1, 3])\n        } else {\n            animations.push([i, pIndex, 3])\n        }\n\n        \n        //back to turqoise\n    }\n\n    //swap pivot with pivot Index\n    //change the height\n    animations.push([end, pIndex, 2])\n    animations.push([end, pIndex, 0])\n    animations.push([end, pIndex, 3])\n    array[end] = array[pIndex]\n    array[pIndex] = pivotValue;\n\n    return pIndex;\n}\n\nexport default function quickSort(array){\n    let animations = [];\n    quickSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n} \n\nfunction quickSortHelper(array, start, end, animations) {\n    if(start >= end ) return;\n\n    let pivot = pivotIndex(array, start, end, animations)\n    quickSortHelper(array, start, pivot - 1, animations)\n    quickSortHelper(array, pivot+1, end, animations)\n}","import React, { Component, useState } from 'react'\nimport './SortingVisualizer.css'\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms'\nimport bubbleSort from '../sortingAlgorithms/bubbleSort'\nimport quickSort from '../sortingAlgorithms/quickSort'\nimport insertionSort from '../sortingAlgorithms/insertionSort'\n\n\nexport default class SortingVisualizer extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            array: [],\n            inputSize: '50',\n            speed: '90',\n            barWidth: '6',\n            sorting: false,\n            \n        }\n        // this.runner = this.runner.bind(this)\n        this.isRunning = false;\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n   \n\n    resetArray() {\n        const array = []\n        for(let i = 0; i < this.state.inputSize; i++){\n            array.push(randomIntFromInterval(5, 500));\n        }\n        this.setState({array});\n    }\n\n    onChange = (e) => {\n        // let oldRange = 200 - 10;\n        // let newRange = 3.5 - 0.001;\n        // let oldVal = e.target.value;\n        // let newVal = (((oldVal - 10)*newRange)/oldRange) + 0.001;\n        // newVal = 3.5001 - newVal;\n        // console.log(newVal)\n\n        let numWidth = Math.floor(window.screen.width / (e.target.value * 3));\n\n        this.setState({inputSize: e.target.value, barWidth: numWidth});\n        this.resetArray();\n        \n    }\n\n    speedChange = (e) => {\n        this.setState({speed: e.target.value})\n        //console.log(this.state.speed)\n    }\n    \n    // mergeSort() {\n    //     const animations = sortingAlgorithms.mergeSort(this.state.array);\n    //     for (let i = 0; i < animations.length; i++){\n    //         const arrayBars = document.getElementsByClassName('array-bar');\n    //         const isColorChange = i % 3 !== 2;\n    //         if(isColorChange) {\n    //             const [barOneIdx, barTwoIdx] = animations[i];\n                \n    //             const barOneStyle = arrayBars[barOneIdx].style;\n    //             const barTwoStyle = arrayBars[barTwoIdx].style;\n    //             const color = i % 3 === 0 ? 'red' : 'turquoise';\n    //             setTimeout(() => {\n    //                 barOneStyle.backgroundColor = color;\n    //                 barTwoStyle.backgroundColor = color;\n    //             }, i * (151 - this.state.speed )) \n    //         } else {\n    //             setTimeout(() => {\n    //                 const [barOneIdx, newHeight] = animations[i];\n    //                 const barOneStyle = arrayBars[barOneIdx].style;\n    //                 barOneStyle.height = `${newHeight}px`;\n    //             },i * (151 - this.state.speed ))\n    //         }\n    //     }\n    // }\n    // hider() {\n    //     this.forceUpdate();\n    //     return \"disabled\"\n    // }\n    \n    runner = () => {\n        this.isRunning = !this.isRunning;\n       this.setState({sorting: !this.state.sorting})\n        \n        \n        console.log(this.isRunning)\n    }\n\n    mergeSort() {\n        //this.setState({isRunning: true})\n        //this.isRunning = !this.isRunning;\n        this.runner();\n        //this.forceUpdate();\n        let newarray = this.state.array.slice();\n        this.mergeSortHelper(newarray);\n        \n\n    }\n    \n    mergeSortHelper (array) {\n        const animations = sortingAlgorithms.mergeSort(array);\n        let k = 0;\n        for (let i = 0; i < animations.length; i++){\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = animations[i][2];\n           // console.log(animations[i])\n            if(isColorChange) {\n                if(isColorChange === 3) {\n                    setTimeout(() => {\n                        const [barOneIdx, newHeight, tempBool] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.backgroundColor = 'turquoise';\n                    }, i * (151 - this.state.speed )/3)\n                    \n                } else {\n                    const [barOneIdx, barTwoIdx, tempBool] = animations[i];\n                    \n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    const color = isColorChange === 1 ? 'red' : 'turquoise';\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    }, i * (151 - this.state.speed )/3) \n                }\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight, tempBool] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.backgroundColor = 'red';\n                    barOneStyle.height = `${newHeight}px`;\n                },i * (151 - this.state.speed )/3)\n            }\n            k = i;\n        }\n        setTimeout(() => {\n            //this.setState({isRunning: false})\n            this.runner();\n            this.setState({array: array})\n        }, ++k * (151 - this.state.speed)/3)\n    }\n\n    bubbleSort() {\n        this.runner();\n        let newArray = this.state.array.slice();\n        \n        bubbleSort(newArray, this.state.array, this.state.speed,this.runner);\n\n        \n        // setTimeout(() => {\n        //     this.setState({array: newArray})\n        // }, ++k * (151 - this.state.speed))\n        \n        \n        // const animations = bubbleSort(this.state.array);\n        // for( let i =0; i< animations.length; i++){\n        //     const arrayBars = document.getElementsByClassName('array-bar');\n        //     const isColorChange = animations[i][2];\n        //     if(isColorChange) {\n        //         const [barOneIdx, barTwoIdx, tempbool] = animations[i];\n        //         //console.log(animations[i])\n        //         const barOneStyle = arrayBars[barOneIdx].style;\n        //         const barTwoStyle = arrayBars[barTwoIdx].style;\n        //         const color = isColorChange === 1 ? 'red' : \n        //                         isColorChange === 2 ? 'turquoise' : 'green'\n        //         setTimeout(()=> {\n        //             barOneStyle.backgroundColor = color;\n        //             barTwoStyle.backgroundColor = color;\n\n        //         },i * (151 - this.state.speed ) )\n        //     } else {\n        //         setTimeout(()=>{\n        //             const [barOneIdx, barTwoIdx, tempbool] = animations[i];\n        //             //console.log(animations[i])\n        //             const barOneStyle = arrayBars[barOneIdx].style;\n        //             const barTwoStyle = arrayBars[barTwoIdx].style;\n        //             const temp = barOneStyle.height;\n        //             barOneStyle.height = barTwoStyle.height;\n        //             barTwoStyle.height = temp;\n\n        //             // const [barOneIdx, newHeight, temp] = animations[i];\n        //             // const barOneStyle = arrayBars[barOneIdx].style;\n        //             // barOneStyle.height = `${newHeight}px`\n        //         }, i * (151 - this.state.speed ))\n        //     }\n\n        // }\n    }\n\n\n    quickSort() {\n        this.runner()\n        let newArray = this.state.array.slice();\n        const animations = quickSort(newArray) \n        let k = 0;\n            for(let i = 0; i < animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const [barOneIndex, barTwoIndex, option] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style\n                const barTwoStyle = arrayBars[barTwoIndex].style\n                if(option) {\n                    const color = option === 1 ? 'yellow' : \n                                    option === 2 ? 'red' : 'turquoise'\n                    setTimeout(()=> {\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    }, i * (151 - this.state.speed)/3)\n                } else {\n                    setTimeout(()=> {\n                        barOneStyle.backgroundColor = 'green';\n                        barTwoStyle.backgroundColor = 'green';\n                        let temp = barOneStyle.height\n                        barOneStyle.height = barTwoStyle.height\n                        barTwoStyle.height = temp;\n                    }, i * (151 - this.state.speed)/3)\n                    \n                }\n                k = i;\n            }\n            setTimeout(()=> {\n                this.runner()\n                this.setState({array : newArray})\n            }, ++k * (151 - this.state.speed)/3);\n\n    }\n\n    insertionSort() {\n        this.runner();\n        let newArray = this.state.array.slice();\n        insertionSort(newArray, this.state.array, this.state.speed, this.runner);\n    }\n\n\n\n\n    render() {\n        const {array} = this.state;\n        const toDisable = this.isRunning ? 'disabled' : null;\n        const buttonStyle = this.isRunning ? \"buttons\" : null;\n        const cursorStyle = this.isRunning ? {\n            cursor : \"default\"\n        } : {\n            cursor: \"pointer\"\n        }\n        const rangerStyle = this.isRunning ? {\n            color: \"black\"\n        } : {\n            color : \"white\"\n        }\n\n        return (\n            <div className=\"array-container\">\n              \n                <div className=\"header-container\">\n                    <div className=\"resetArray\">\n                        <button className={buttonStyle}\n                                style={cursorStyle} \n                             onClick={() => this.resetArray()}\n                            disabled={toDisable}>\n\n                            Generate New Array</button>\n                    </div>\n                    <div className=\"separator\"></div>\n\n                    <div className=\"sizeChanger\"\n                        style={rangerStyle}>\n                        Adjust The Array size\n                    </div>\n                    <input className=\"sizer\"\n                        type=\"range\"\n                        name=\"arraySize\"\n                        min=\"10\"\n                        max=\"200\"\n                        defaultValue=\"100\"\n                        onChange={this.onChange} \n                        disabled={toDisable}\n                        style={cursorStyle}\n                        />\n                    \n\n                    <div className=\"separator\"></div>\n\n                    <div className=\"speedChanger\"\n                        style={rangerStyle}>\n                    Adjust The Speed of Sorting\n                    </div>\n                    <input className=\"speeder\" \n                        type=\"range\"\n                        name=\"sorting-speed\"\n                        min=\"1\"\n                        max=\"150\"\n                        defaultValue=\"90\"\n                        onChange={this.speedChange}\n                        disabled={toDisable}\n                        style={cursorStyle}\n                    />\n                    \n\n                    \n                    <div className=\"separator\"></div>\n                    \n                       \n\n                    \n                        \n                    \n\n                    \n\n                    <div className=\"algos\">\n                        \n                        <button className={buttonStyle}\n                            style={cursorStyle}\n                                \n                                //onClick={!this.isRunning ? () =>this.mergeSort() : null}>\n                                onClick={()=> {\n                                    if(!this.isRunning){\n                                        this.mergeSort();\n                                    }\n                                }}>\n                            Merge Sort</button>\n                        <button className={buttonStyle}\n                                style={cursorStyle}\n                                onClick={() => {\n                                if(!this.isRunning){\n                                    this.quickSort()    \n                                }\n                            }}>\n                            Quick Sort</button>\n                        <button className={buttonStyle}\n                            style={cursorStyle}\n                            onClick={() => {\n                            if(!this.isRunning) {\n                                this.insertionSort()\n                            }\n                        }}>\n                            Insertion Sort</button>\n                        <button className={buttonStyle}\n                            style={cursorStyle} \n                            onClick={() => {\n                            if(!this.isRunning) {\n                                this.bubbleSort()\n                            }\n                        }}>\n                            Bubble Sort</button>\n                    </div>\n\n                </div>\n                <div className=\"array-graph\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{ height: `${value}px`,\n                                    width:`${this.state.barWidth }px`\n                                }}>\n                        </div>\n                    ))} \n                </div>\n\n\n            </div>\n        )\n    }\n}\n\nfunction randomIntFromInterval(min, max){\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n\n","// export default function bubbleSort(array) {\n//     if(array.length <= 1) return array;\n//     const animations = [];\n//     const auxilaryArray = array.slice();\n//     let n = array.length;\n\n//     for (let i = 0; i < n -1; i++){\n//         for( let j = 0; j < n - i - 1; j++){\n//             // making the bar red at 1\n//             animations.push([j, j+1, 1])\n            \n//             if(array[j] > array[j + 1]) {\n//                 // color to be exchanged at 3\n//                 animations.push([j, j+1, 3])\n                \n//                 animations.push([j, j+1, 0])\n//                 let temp = array[j+1];\n//                 array[j+1] = array[j];\n//                 array[j] = temp\n                \n//             }\n//             // back to normal color at 2\n//             animations.push([j, j+1, 2])\n\n//         }\n//     }\n//     console.log(document.getElementsByClassName('array-bar'))\n    \n//     return animations;\n// }\n\n\nexport default function bubbleSort(array, originalArray, speed, runner) {\n    if(array.length <= 1) return;\n    const animations = [];\n   \n    let n = array.length;\n    let k = 0;\n    let phase = 0;\n\n    for (let i = 0; i < n -1; i++){\n        for( let j = 0; j < n - i - 1; ){\n            const arrayBars = document.getElementsByClassName('array-bar');\n\n            // making the bar red at 1\n            const barOneStyle = arrayBars[j].style;\n            const barTwoStyle = arrayBars[j+1].style;\n\n            if(phase === 0) {\n                setTimeout(()=> {\n                    barOneStyle.backgroundColor = 'red'\n                    barTwoStyle.backgroundColor = 'red'\n                }, k * (151 - speed )/8)\n                phase++;\n            } else if (phase === 1) {\n                if(array[j] > array[j + 1]) {\n                    // color to be exchanged at 3\n                    setTimeout(()=> {\n                        barOneStyle.backgroundColor = 'green'\n                        barTwoStyle.backgroundColor = 'green'\n                    }, k * (151 - speed )/8)\n                    \n                    //exchange the hieghts\n                    setTimeout(()=> {\n                        const tempHeight = barOneStyle.height;\n                        barOneStyle.height = barTwoStyle.height;\n                        barTwoStyle.height = tempHeight;\n                    }, k * (151 - speed )/8)\n    \n                    let temp = array[j+1];\n                    array[j+1] = array[j];\n                    array[j] = temp\n                }\n                phase++;\n\n            } else if (phase === 2) {\n                // back to normal color at 2\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = 'turquoise'\n                    barTwoStyle.backgroundColor = 'turquoise'\n                }, k * (151 - speed)/8)\n                phase++;\n                j++;\n            } \n\n            k++;\n            phase %= 3;\n\n        }\n    }\n    //console.log(document.getElementsByClassName('array-bar'))\n    \n    setTimeout(()=> {\n        runner()\n        originalArray.length = 0;\n        originalArray.push(...array)\n        //console.log(originalArray)\n    }, ++k * (151 - speed)/8)\n    \n}","export default function insertionSort(array, originalArray, speed, runner) {\n    let n = array.length\n    if(n <= 1) return \n    let k = 0;\n\n    for(let i = 1; i < n; i++) {\n        let curr = array[i];\n        \n        let phase = 0;\n        //console.log(\"this is pre \", j)\n        if(array[i-1] <= curr) {\n            for (let j = 0; j < 2; j++){\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const barOneStyle = arrayBars[i].style;\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = j === 0 ? 'red' : 'turquoise'\n                }, k++ * (151 - speed)/3)\n            }\n        }\n\n        for (let j = i - 1; ((phase >= 3) || (j >= 0 && array[j] > curr) ) ;) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const barOneStyle = arrayBars[j].style;\n            const barTwoStyle = arrayBars[j+1].style;\n            const iBar = arrayBars[i].style;\n            \n            //phase-0 set curr to green\n            if(phase === 0) {\n                setTimeout(()=> {\n                    barOneStyle.backgroundColor = 'red'\n                    //barTwoStyle.backgroundColor = 'red'\n                    \n                    \n                    //iBar.backgroundColor = 'green'\n                }, k * (151 - speed)/3)\n                \n                \n                phase++;\n            } else if (phase === 1) {\n\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = 'red'\n                    barTwoStyle.backgroundColor = 'red'\n                }, k * (151 - speed)/3)\n                phase++;\n\n            } else if (phase === 2) {\n                // comparing bars color to red\n\n                // const barOneStyle = arrayBars[j].style;\n                // const barTwoStyle = arrayBars[j+1].style;\n                // const iBar = arrayBars[i].style;\n                setTimeout(()=> {\n                    //console.log(\"this is \", j, \"  jjjj  \")\n                \n                    const temp = barTwoStyle.height;\n                    barTwoStyle.height = barOneStyle.height;\n                    barOneStyle.height = temp;\n                    \n                    barOneStyle.backgroundColor = 'turquoise'\n                    barTwoStyle.backgroundColor = 'turquoise'\n                    \n                    iBar.backgroundColor = 'yellow'\n                }, k * (151 - speed)/3)\n                array[j+1] = array[j];\n                j--;\n\n                if(j >= 0 && array[j] > curr) {\n                    phase = 0;\n                   \n                }else {\n                    j++;\n                    phase = 3;\n                } \n            } else if(phase === 3) {\n                // const barOneStyle = arrayBars[j].style;\n                // const barTwoStyle = arrayBars[i].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = 'purple'\n                    iBar.backgroundColor = 'purple'\n\n                }, k * (151 - speed)/3)\n                \n                phase++;\n            } else if (phase === 4) {\n                \n                // const barOneStyle = arrayBars[j].style;\n                // const barTwoStyle = arrayBars[i].style;\n                setTimeout(() => {\n                   // barOneStyle.height = iBar.height;\n\n                    barOneStyle.backgroundColor = 'turquoise'\n                    iBar.backgroundColor = 'turquoise'\n                }, k * (151 - speed)/3)\n                array[j] = curr;\n                break;\n            }\n            k++;\n        }   \n    }\n    setTimeout(()=> {\n        runner();\n        originalArray.length = 0;\n        originalArray.push(...array)\n    }, ++k * (151 - speed)/3)\n}","import React from 'react'\nimport './App.css'\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}